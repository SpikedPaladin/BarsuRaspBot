using DataStore;
using Telegram;

namespace Barsu {
    
    public class InlineTimetable {
        
        public async void send_group_incorrect(InlineQuery query) {
            yield bot.send(new AnswerInlineQuery() {
                inline_query_id = query.id,
                cache_time = 600,
                
                results = { new InlineQueryResultArticle() {
                    title = "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                    description = "–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ùåÔ∏è",
                    input_message_content = new InputTextMessageContent() {
                        message_text = "‚ö†Ô∏è *–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!*\n\n–ü–µ—Ä–µ–π–¥–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π (@BarsuRaspBot) —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É.",
                        parse_mode = ParseMode.MARKDOWN
                    }
                }}
            });
        }
        
        public async void send_no_group(InlineQuery query) {
            yield bot.send(new AnswerInlineQuery() {
                inline_query_id = query.id,
                is_personal = true,
                cache_time = 5,
                
                results = { new InlineQueryResultArticle() {
                    title = "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!",
                    description = "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ª–∏–±–æ –≤—ã–±–µ—Ä–∏ –µ–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å–æ –º–Ω–æ–π",
                    input_message_content = new InputTextMessageContent() {
                        message_text = "‚ö†Ô∏è *–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞*\n\n–ü–µ—Ä–µ–π–¥–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π (@BarsuRaspBot) —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                        parse_mode = ParseMode.MARKDOWN
                    }
                }}
            });
        }
        
        public async void send_timetable(InlineQuery query) {
            yield send_inline_timetable(query.id, get_config(query.from.id).group);
        }
        
        public async void send_group_timetable(InlineQuery query) {
            var group = data.parse_group(query.query);
            
            if (group == null) {
                yield send_group_incorrect(query);
                
                return;
            }
            
            yield send_inline_timetable(query.id, group);
        }
        
        private async void send_inline_timetable(string query_id, string group) {
            var timetable = yield timetable_manager.get_timetable(group, get_current_week().format("%F"));
            InlineQueryResult[] results = {};
            
            if (timetable != null) {
                // results += new InlineQueryResultPhoto() {
                //     id = @"week:$group",
                //     photo_url = "https://i.ibb.co/9TwR5S7/week-preview.png",
                //     thumbnail_url = "https://i.ibb.co/9TwR5S7/week-preview.png",
                //     title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
                //     description = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"
                // };
                foreach (var day in timetable.days) {
                    results += new InlineQueryResultArticle() {
                        title = @"üóìÔ∏è $(day.day_of_week) $(day.date)",
                        description = @"‚úçÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä - $(day.number_of_lessons)",
                        thumbnail_url = "https://i.ibb.co/D5xCKn5/day-of-week.png",
                        input_message_content = new InputTextMessageContent() {
                            message_text = @"üë•Ô∏è –ì—Ä—É–ø–ø–∞: *$(group)*\n" + timetable.to_string(day.day_of_week),
                            parse_mode = ParseMode.MARKDOWN
                        }
                    };
                }
            } else
                results += new InlineQueryResultArticle() {
                    title = "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                    description = "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
                    input_message_content = new InputTextMessageContent() {
                        message_text = "‚ö†Ô∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!*",
                        parse_mode = ParseMode.MARKDOWN
                    }
                };
            
            yield bot.send(new AnswerInlineQuery() {
                inline_query_id = query_id,
                is_personal = true,
                results = results
            });
        }
    }
}
