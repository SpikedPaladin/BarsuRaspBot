using BarsuTimetable;
using Telegram;

namespace Start {
    
    public class StartMessages {
        
        public async void post(Message msg) {
            if (msg.text.down().contains("–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")) {
                config_manager.set_user_state(msg.from.id, StartupState.DEPARTMENT);
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    reply_markup = department_keyboard(),
                    text = "üï∂Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ñ–µ–¥—Ä—É"
                });
                
                return;
            }
            
            config_manager.set_user_state(msg.from.id, StartupState.FACULTY);
            yield bot.send(new SendMessage() {
                chat_id = msg.chat.id,
                reply_markup = faculty_keyboard(),
                text = "üï∂Ô∏è –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
            });
        }
        
        public async void department(Message msg) {
            var department = group_manager.parse_department(msg.text);
            
            if (department == null) {
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!"
                });
                
                return;
            }
            
            config_manager.set_user_state(msg.from.id, StartupState.NAME);
            yield bot.send(new SendMessage() {
                chat_id = msg.chat.id,
                reply_markup = name_keyboard(department),
                text = @"üßë‚Äçüè´Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
            });
        }
        
        public async void name(Message msg) {
            var name = group_manager.parse_name(msg.text);
            
            if (name == null) {
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!"
                });
                
                return;
            }
            
            var config = config_manager.find_user_config(msg.from.id);
            config.name = name;
            config.type = ConfigType.TEACHER;
            config_manager.set_user_state(msg.from.id, null);
            yield bot.send(new SendMessage() {
                chat_id = msg.chat.id,
                parse_mode = ParseMode.MARKDOWN,
                reply_markup = new ReplyKeyboardRemove(),
                text = @"üßë‚Äçüè´Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: *$name*\n" +
                        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n" +
                        "–ö–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                        "–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ /restart"
            });
        }
        
        public async void faculty(Message msg) {
            var faculty = group_manager.parse_faculty(msg.text);
            
            if (faculty == null) {
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "–í—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!"
                });
                
                return;
            }
            
            config_manager.set_user_state(msg.from.id, StartupState.SPECIALITY);
            yield bot.send(new SendMessage() {
                chat_id = msg.chat.id,
                reply_markup = speciality_keyboard(faculty),
                text = @"üß†Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
            });
        }
        
        public async void speciality(Message msg) {
            var speciality = group_manager.parse_speciality(msg.text);
            
            if (speciality == null) {
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!"
                });
                
                return;
            }
            
            config_manager.set_user_state(msg.from.id, StartupState.GROUP);
            yield bot.send(new SendMessage() {
                chat_id = msg.chat.id,
                reply_markup = group_keyboard(speciality),
                text = @"üë•Ô∏è –ê —Ç–µ–ø–µ—Ä—å –≥—Ä—É–ø–ø—É"
            });
        }
        
        public async void group(Message msg) {
            var group = group_manager.parse_group(msg.text);
            
            if (group == null) {
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!"
                });
                
                return;
            }
            
            var config = config_manager.find_user_config(msg.from.id);
            config.group = group;
            config.type = ConfigType.STUDENT;
            config_manager.set_user_state(msg.from.id, null);
            yield bot.send(new SendMessage() {
                chat_id = msg.chat.id,
                parse_mode = ParseMode.MARKDOWN,
                reply_markup = new ReplyKeyboardRemove(),
                text = @"üë•Ô∏è –¢—ã –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É: *$(group)*\n\n" +
                       "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - /day\n" +
                       "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ - /tomorrow\n" +
                       "–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ - /rasp\n" +
                       "–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —Å–ª–µ–¥. –Ω–µ–¥–µ–ª–∏ - /raspnext\n" +
                       "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é (Beta) - /week\n" +
                       "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª—é (Beta) - /weeknext\n" +
                       "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ - /bells\n" +
                       "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å - /help\n\n" +
                       "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - /settings\n\n" +
                       "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã, –∞ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ '–ú–µ–Ω—é'\n\n" +
                       "–¢–∞–∫–∂–µ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º, –≤ –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏: \n" +
                       "`@BarsuRaspBot `(—Å –ø—Ä–æ–±–µ–ª–æ–º). " +
                       "–¢–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É."
            });
        }
        
        public ReplyKeyboardMarkup department_keyboard() {
            var keyboard = new ReplyKeyboardMarkup() { is_persistent = true, resize_keyboard = true };
            
            foreach (var department in group_manager.get_departments()) {
                keyboard.add_button(new KeyboardButton() { text = department.name }).new_row();
            }
            
            return keyboard;
        }
        
        public ReplyKeyboardMarkup name_keyboard(Department department) {
            var keyboard = new ReplyKeyboardMarkup() { is_persistent = true, resize_keyboard = true };
            
            foreach (var teacher in department.teachers) {
                keyboard.add_button(new KeyboardButton() { text = teacher }).new_row();
            }
            
            return keyboard;
        }
        
        public ReplyKeyboardMarkup faculty_keyboard() {
            var keyboard = new ReplyKeyboardMarkup() { is_persistent = true, resize_keyboard = true };
            
            foreach (var faculty in group_manager.get_faculties()) {
                keyboard.add_button(new KeyboardButton() { text = faculty.name }).new_row();
            }
            
            return keyboard;
        }
        
        public ReplyKeyboardMarkup speciality_keyboard(Faculty faculty) {
            var keyboard = new ReplyKeyboardMarkup() { is_persistent = true, resize_keyboard = true };
            
            foreach (var speciality in faculty.specialties) {
                keyboard.add_button(new KeyboardButton() { text = speciality.name }).new_row();
            }
            
            return keyboard;
        }
        
        public ReplyKeyboardMarkup group_keyboard(Speciality speciality) {
            var keyboard = new ReplyKeyboardMarkup() { is_persistent = true, resize_keyboard = true };
            
            foreach (var group in speciality.groups) {
                keyboard.add_button(new KeyboardButton() { text = group }).new_row();
            }
            
            return keyboard;
        }
    }
}
