using Barsu;
using DataStore;
using Telegram;
using Gee;

namespace Admin {
    
    public class AdminCommands {
        
        public async void ping(Message msg) {
            var id = int64.parse(msg.get_command_arguments());
            var chat = yield bot.get_chat(new ChatId(id));
            
            if (chat != null)
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = @"–ü–æ–ø–∞–ª—Å—è –≥–∞–¥—ë–Ω—ã—à!\n@$(chat.username ?? "[–ü–∏–∑–¥—é–∫](tg://user?id=$(chat.id))")"
                });
            else
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = @"–ü–∏–¥–æ—Ä –∑–∞–±–∞–Ω–∏–ª!"
                });
        }
        
        public async void remove(Message msg) {
            var id = int64.parse(msg.text);
            
            if (data.get_config(id) != null) {
                data.remove_config(id, false);
                
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "–ï–±–Ω—É–ª –¥–∞—É–Ω–∞!"
                });
            } else
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "–ü–æ–≤–µ–∑–ª–æ –¥–æ–¥–∏–∫—É –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç!"
                });
        }
        
        public async void group(Message msg) {
            var group = data.parse_group(msg.get_command_arguments());
            int count = 0;
            if (group != null) {
                var text = "–ü–æ–ø–∞–ª–∏—Å—å –µ–±–ª–∞–Ω—á–∏–∫–∏:\n";
                foreach (var config in data.get_users()) {
                    if (config.group != group)
                        continue;
                    
                    text += @"[–ü–∏–∑–¥—é–∫](tg://user?id=$(config.id)) `$(config.id)`\n";
                    count++;
                }
                
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = text + @"–í—Å–µ–≥–æ –ø–∏–∑–¥—é–∫–æ–≤: $count"
                });
            } else
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "–ë–ª—è—Ç—å –Ω—É —Ç—ã/—è –µ–±–ª–∞–Ω –ø–∏–∑–¥–µ—Ü"
                });
        }
        
        public async void stat(Message msg) {
            if (msg.get_command_arguments() == "teacher") {
                string text = "–ü—Ä–µ–ø–æ–¥—ã:\n";
                foreach (var config in data.get_users()) {
                    if (config.post != UserPost.TEACHER)
                        continue;
                    
                    text += @"[$(config.name)](tg://user?id=$(config.id)) `$(config.id)`\n";
                }
                
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    parse_mode = ParseMode.MARKDOWN,
                    text = text
                });
                
                return;
            }
            
            int sub_count = 0, registered = 0, changing = 0, start_selecting = 0, teachers = 0;
            
            foreach (var config in data.get_users()) {
                if (config.subscribed)
                    sub_count++;
                
                if (config.post != null && config.state != null)
                    changing++;
                
                if (config.post == null && config.state != null)
                    start_selecting++;
                
                if (config.post != null)
                    registered++;
                
                if (config.post == UserPost.TEACHER)
                    teachers++;
            }
            
            string text = @"üë•Ô∏è –ß–∞—Ç–∏–∫—Å—ã: *$(data.get_chats().size)*\n";
            
            text += "\nüë§Ô∏è –Æ–∑–µ—Ä—ã:\n";
            text += @"–í—Å–µ–≥–æ: $(data.get_users().size) (*$registered*/$changing/$start_selecting)\n";
            text += @"–ü—Ä–µ–ø–æ–¥–æ–≤: *$teachers*\n";
            text += @"–ü–æ–¥—Å–æ—Å—ã: $sub_count";
            
            yield bot.send(new SendMessage() {
                chat_id = msg.chat.id,
                text = text
            });
        }
        
        public async void broadcast(Message msg) {
            if (msg.reply_to_message == null) {
                yield bot.send(new SendMessage() {
                    chat_id = msg.chat.id,
                    text = "‚ö†Ô∏è –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                });
                
                return;
            }
            
            yield broadcast_manager.send_broadcast(msg.chat.id, msg.reply_to_message.message_id, false);
        }
        
        public async void sync(Message msg) {
            var response = yield bot.send(new SendMessage() {
                chat_id = msg.chat.id,
                parse_mode = ParseMode.MARKDOWN,
                text = "*–ì—Ä—É–ø–ø—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è...*"
            });
            var message_id = new Message(response.result.get_object()).message_id;
            
            yield data.sync();
            yield bot.send(new EditMessageText() {
                chat_id = msg.chat.id,
                message_id = message_id,
                parse_mode = ParseMode.MARKDOWN,
                text = "*–ì—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*"
            });
        }
        
        public async void update_commands(Message msg) {
            var day = new BotCommand() {
                command = "day",
                description = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è"
            };
            var tomorrow = new BotCommand() {
                command = "tomorrow",
                description = "–ù–∞ –∑–∞–≤—Ç—Ä–∞"
            };
            var rasp = new BotCommand() {
                command = "rasp",
                description = "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            };
            var raspnext = new BotCommand() {
                command = "raspnext",
                description = "–ù–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª—é"
            };
            var next = new BotCommand() {
                command = "next",
                description = "–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞"
            };
            var bells = new BotCommand() {
                command = "bells",
                description = "–ó–≤–æ–Ω–∫–∏"
            };
            var bus = new BotCommand() {
                command = "bus",
                description = "–ë–ª–∏–∂–∞–π—à–∏–µ –∞–≤—Ç–æ–±—É—Å—ã"
            };
            var settings = new BotCommand() {
                command = "settings",
                description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            };
            var help = new BotCommand() {
                command = "help",
                description = "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
            };
            
            yield bot.send(new SetMyCommands() {
                commands = { day, tomorrow, rasp, raspnext, next, bells, bus, help },
                scope = new BotCommandScopeDefault()
            });
            yield bot.send(new SetMyCommands() {
                commands = { day, tomorrow, rasp, raspnext, next, bells, bus, settings, help },
                scope = new BotCommandScopeAllPrivateChats()
            });
            yield bot.send(new SetMyCommands() {
                commands = { day, tomorrow, rasp, raspnext, next, bells, bus, settings, help },
                scope = new BotCommandScopeAllChatAdministrators()
            });
        }
    }
}
